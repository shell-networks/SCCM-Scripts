<#
    .NOTES
    --------------------------------------------------------------------------------
    Code generated by:  Hands
    Generated on:       13/05/2018
    Generated by:       Guillaume Mateos
    Organization:       SHell Networks
    --------------------------------------------------------------------------------
    .SYNOPSIS
    Use this script to create all usefull groups and users for SCCM
    .DESCRIPTION
    1 - Creation of groups
    2 - Creation of users
    3 - Users in the groups 
#>

#region Modules
Import-Module ActiveDirectory
#endregion

#region Variables

$SiteServer = "SHNPRODSCM01"
$GroupsNamingConvention = "GG-SHN-"
$AccountsNamingConvention = "shn-svc-"
$SccmUsersPath = "OU=Services accounts,OU=Users,OU=1 - Admins Users and Groups,OU=AGEN,OU=Shell-networks,DC=shell-networks,DC=local" #Path where users are going to be created within AD
$SccmGroupsPath = "OU=Groups,OU=1 - Admins Users and Groups,OU=AGEN,OU=Shell-networks,DC=shell-networks,DC=local" #Path where groups are going to be created within AD
$AccountsPassword = "password123" | ConvertTo-SecureString -AsPlainText -Force #Here your super password for accounts

#endregion

#region Functions

function Set-SccmUsersAndGroups
{
    <#
        .SYNOPSIS
        Use this to create users and groups that SCCM will need
        .DESCRIPTION
        Use this to create users and groups that SCCM will need
        .PARAMETER SccmUsersPath
        DN of the AD path where users will be created
        .PARAMETER SccmGroupsPath
        DN of the AD path where groups will be created
        .PARAMETER AccountsNamingConvention
        Naming convention to add before the username
        .PARAMETER GroupsNamingConvention
        Naming convention to add before the group name
        .PARAMETER AccountsPassword
        Password to set for services accounts
        .PARAMETER SiteServers
        SCCM Site servers
        .EXAMPLE
        Set-SccmUsersAndGroups -SccmUsersPath -SccmGroupsPath -AccountsNamingConvention -GroupsNamingConvention
    #>
    [Cmdletbinding()]
    Param (
    [Parameter(Mandatory = $True,Position = 0)]
    [String]
    $SccmUsersPath,
    [Parameter(Mandatory = $True,Position = 1)]
    [String]
    $SccmGroupsPath,
    [Parameter(Mandatory = $True,Position = 2)]
    [String]
    $AccountsNamingConvention,
    [Parameter(Mandatory = $True,Position = 3)]
    [String]
    $GroupsNamingConvention,
    [Parameter(Mandatory = $True,Position = 4)]
    [System.Security.SecureString]
    $AccountsPassword,
    [Parameter(Mandatory = $True,Position = 5)]
    [String]
    $SiteServers
    ) 

    $SccmAccounts = @(
            @{
                Name = "SCCM-SQL"
                Description = "SQL server service account for SCCM"
            },
            @{
                Name = "SCCM-NAA"
                Description = "SCCM Network Access Account"
            },
            @{
                Name = "SCCM-CPush"
                Description = "Domain user account for use SCCM client push install"
            },
            @{
                Name = "SCCM-SQLRep"
                Description = "Domain user account for use with reporting services User"
            },
            @{
                Name = "SCCM-DomJoin"
                Description = "Domain account used to join machine to the domain during OSD"
            }        
        )
    $SccmGroups = @(
        @{
            Name = "SCCM-Admins"
            Description = "Domain group containing all SCCM Admins Group"
        },
        @{
            Name = "SCCM-SiteServers"
            Description = "Domain group containing all SCCM servers in the hierarchy Group"
        }
        )

    foreach($Account in $SccmAccounts) #First we create accounts
    {
        $Name = "$($AccountsNamingConvention)$($Account.Name)"#Here we respect naming convention for accounts

        Write-Host -ForegroundColor Cyan "Creating account $($Name)"

        $Create = $True
        try 
        {
            New-ADUser -Name $Name -Path $SccmUsersPath -Description $Account.Description `
            -AccountPassword $AccountsPassword -PasswordNeverExpires $True -Enabled $True
        }
        catch 
        {
            $Create = $false
        }

        if($Create)
        {
            Write-Host -ForegroundColor Green "$($Name) created"
        }
        else 
        {
            Write-Host -ForegroundColor Red "Error during $($Name) creation"
        }    
    }

    foreach($Group in $SccmGroups) #Then we create the groups
    {
        $Name = "$($GroupsNamingConvention)$($Group.Name)"#Here we respect naming convention for accounts

        $Create = $True
        try 
        {
            New-ADGroup -GroupScope Global -Name $Name -Description $Group.Description `
            -Path $SccmGroupsPath
        }
        catch 
        {
            $Create = $False
        }
        
        if($Create)
        {
            Write-Host -ForegroundColor Green "$($Name) created"
        }
        else 
        {
            Write-Host -ForegroundColor Red "Error during $($Name) creation"
        } 
    }

    foreach($Server in $SiteServers)#Finally we add users or computers accounts into groups
    {
        $SiteServerGroup = "$($GroupsNamingConvention)$($SccmGroups[1].name)"
        Write-Host -ForegroundColor Cyan "Adding $($Server) in $($SiteServerGroup)"
        
        try 
        {
            Add-ADGroupMember -Identity $SiteServerGroup -Members $(get-adcomputer $Server)
        }
        catch 
        {
            Write-Host -ForegroundColor Red "Error adding $($Server) to group $($SiteServerGroup)"
        }
    }
}

#endregion

#region script

Set-SccmUsersAndGroups -SccmUsersPath $SccmUsersPath -SccmGroupsPath $SccmGroupsPath `
-AccountsNamingConvention $AccountsNamingConvention -GroupsNamingConvention $GroupsNamingConvention `
-AccountsPassword $AccountsPassword -SiteServers $SiteServer

#endregion